#!/usr/bin/env python
#
# Ensure that the specified refs match a releases.yml file
# that is stored in git.
#
# Copyright 2016 Colin Walters <walters@verbum.org>
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
# 
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#  Lesser General Public License for more details.
# 
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library. If not, see <http://www.gnu.org/licenses/>.

from gi.repository import GLib, Gio, OSTree
import argparse
import yaml
import sys

def fatal(msg):
    print >>sys.stderr, msg
    sys.exit(1)

parser = argparse.ArgumentParser(prog=sys.argv[0])
parser.add_argument("--repo", help="Repo path",
                    action='store', required=True)
parser.add_argument("--releases", help="Releases file",
		    action='store', required=True)

args = parser.parse_args()

r = OSTree.Repo.new(Gio.File.new_for_path(args.repo))
r.open(None)

releasedata = yaml.load(open(args.releases))
baseref = releasedata['baseref']
changed = False
for (name,commit) in releasedata['releases'].iteritems():
    ref = baseref + name
    [_, current] = r.resolve_rev(ref, True)
    if current is None:
        print("Ref {} does not currently exist".format(ref))
    else:
        if current == commit:
            continue
        print("Previously: {} = {}".format(ref, current))
    r.set_ref_immediate(None, ref, commit)
    print("Changed: {} = {}".format(ref, commit))
    changed = True
if not changed:
    print("Processed {}: No changes".format(args.releases))
